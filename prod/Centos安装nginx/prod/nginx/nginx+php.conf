user  nginx;

{% if  grains['num_cpus'] == 1 %}
worker_processes  2;#开启的进程数，一般跟逻辑cpu核数一致
worker_cpu_affinity 0001 0010;

{% elif  grains['num_cpus'] == 4 %}
worker_processes  4;#开启的进程数，一般跟逻辑cpu核数一致
worker_cpu_affinity 00000001 00000010 00000011 00000101;

{% elif  grains['num_cpus'] == 8 %}
worker_processes  ;#开启的进程数，一般跟逻辑cpu核数一致
worker_cpu_affinity 00000001 00000010 00000011 00000101;
{% endif %}



error_log  /data/nginx_logs/logs/error.log;
#error_log  /data/nginx_logs/logs/error.log  notice;
#error_log  /data/nginx_logs/logs/error.log  info;

pid      nginx.pid;
worker_rlimit_nofile 1000000; #指定一个nginx进程打开的最多文件描述符数目，受系统进程的最大打开文件数量限制ulimit -n
events {	
    use epoll;
    worker_connections 1000000;#这个指令是指当一个Nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文
#件数（ulimit -n）与nginx 进程数相除，但是Nginx 分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。

}


http {
    server_tokens off; #不显示版本号
    include       mime.types;
    default_type  application/octet-stream;
    
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;
    server_names_hash_bucket_size 128;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;#客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。
    client_max_body_size 2M; #设置允许客户端请求的最大的单个文件字节数 
    sendfile        on;#开启高效文件传输模式 
    tcp_nopush     on; #开启防止网络阻塞 
    keepalive_timeout  45; #设置客户端连接保存活动的超时时间  
    client_header_timeout 10; #用于设置客户端请求读取超时时间 
    client_body_timeout 10; #用于设置客户端请求主体读取超时时间 

    open_file_cache max=1000000 inactive=30s; #这个将为打开文件指定缓存，默认是没有启用的，max 指定缓存数量，建议和打开文件数一致，inactive 是指经过多长时间文件没被请求后删除缓存。
    open_file_cache_valid 30s; #30秒检查一次缓存的有效信息
    open_file_cache_min_uses 1; #缓存中文件的使用次数少于1次将被删除
    
    #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度。下面参数看字面意思都能理解。
    fastcgi_temp_path /data/fastcgi_temp;
    fastcgi_cache_path /data/fastcgi_cache levels=1:2 keys_zone=cache_fastcgi:16m inactive=30m max_size=1g;#共享内存区名为cache_fastcgi，占用内存128MB；缓存过期时间为30分钟；缓存数据保存于磁盘的最大空间大小为1GB。
    fastcgi_connect_timeout 300; #指定连接到后端FastCGI的超时时间
    fastcgi_send_timeout 300;	#指定向FastCGI传送请求的超时时间，这个值是已经完成两次握手后向FastCGI传送请求的超时时间。
    fastcgi_read_timeout 300; ##指定接收FastCGI应答的超时时间，这个值是已经完成两次握手后接收FastCGI应答的超时时间
    fastcgi_buffer_size 64k; 	
    fastcgi_buffers 4 128k;
    fastcgi_busy_buffers_size 128k;
    fastcgi_temp_file_write_size 256k;
    fastcgi_cache_valid 200 302 1h;
    fastcgi_cache_valid 301 1d;
    fastcgi_cache_valid any 1m; 
    send_timeout 10; #用于设置相应客户端的超时时间

    gzip on; #开启gzip压缩  “gzip on”表示开启gzip压缩，实时压缩输出数据流
    gzip_disable "MSIE [1-6].";#禁止IE1-6压缩
    gzip_min_length 1k; #设置允许压缩的页面最小字节数 （gzip_min_length用于设置允许压缩的页面最小字节数，页面字节数从header头的Content-Length中获取。默认值是0，不管页面多大都进行压缩。建议设置成大于1K的字节数，小于1K可能会越压越大。）
    gzip_buffers 8 48k; #申请8个单位为48K的内存作为压缩结果流缓存 
    gzip_http_version 1.1; #设置识别http协议的版本,默认是1.1 
    gzip_comp_level 5; #指定gzip压缩比,1-9 数字越小,压缩比越小,速度越快. 
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    limit_conn_zone  $binary_remote_addr zone=addr:10m;  #1.1.8版本发布后将limit_conn更换为limit_conn_zone
    limit_conn addr 10;
    #上面表示限制每个远程IP地址的客户端同时打开连接不能超过10个。	




    server {
        listen       80;
        server_name  localhost;
        access_log  /data/nginx_logs/logs/host.access.log  main buffer=4k;
#	include  /data/Source/.htaccess;
        location / {
            root   /data/Source;
            index  index.html index.htm index.php;
	    fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
 	    try_files $uri $uri/ /index.php?$args;
	    rewrite ^(.*)/equip(d+).html$ $1/index.php?m=content&c=index&a=lists&catid=$2 last; 
        }

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

	## Only allow these request methods ##
	if ($request_method !~ ^(GET|HEAD|POST)$ ) {
	return 444;
	}

	## Block some robots ##	
	if ($http_user_agent ~* (baiduspider|googlebot|soso|bing|sogou|yahoo|sohu-search|yodao|YoudaoBot|robozilla|msnbot|MJ12bot|NHN|Twiceler)) {
            return  403;
        }

		
	##静态资源不记录日志
#	location ~  /images/.*\.(gif|jpg|jpeg|png|bmp)$ {
#	# 关闭日志
#	root /data/Source/static/images;
#	if ( -f $request_filename ) {
#                expires 30d;
#	        access_log off;
#	}
#	}


        location ~ \.php$ {
            root           /data/Source;
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;
            fastcgi_param  SCRIPT_FILENAME   $document_root$fastcgi_script_name;
            include        fastcgi_params;
    }
}

