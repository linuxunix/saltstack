user  nginx;

{% if  grains['num_cpus'] == 1 %}
worker_processes  1;#开启的进程数，一般跟逻辑cpu核数一致
#worker_cpu_affinity 0001 0010;

{% elif  grains['num_cpus'] == 4 %}
worker_processes  4;#开启的进程数，一般跟逻辑cpu核数一致
worker_cpu_affinity 00000001 00000010 00000011 00000101;

{% elif  grains['num_cpus'] == 8 %}
worker_processes  ;#开启的进程数，一般跟逻辑cpu核数一致
worker_cpu_affinity 00000001 00000010 00000011 00000101;
{% endif %}



error_log  /data/nginx_logs/logs/error.log;
#error_log  /data/nginx_logs/logs/error.log  notice;
#error_log  /data/nginx_logs/logs/error.log  info;

pid      nginx.pid;
worker_rlimit_nofile 1000000; #指定一个nginx进程打开的最多文件描述符数目，受系统进程的最大打开文件数量限制ulimit -n
events {	
    use epoll;
    worker_connections 1000000;#这个指令是指当一个Nginx 进程打开的最多文件描述符数目，理论值应该是最多打开文
#件数（ulimit -n）与nginx 进程数相除，但是Nginx 分配请求并不是那么均匀，所以最好与ulimit -n 的值保持一致。现在在linux 2.6内核下开启文件打开数为65535，worker_rlimit_nofile就相应应该填写65535。

}


http {
    server_tokens off; #不显示版本号
    include       mime.types;
    default_type  application/octet-stream;
    
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;
    server_names_hash_bucket_size 128;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;#客户端请求头部的缓冲区大小，这个可以根据你的系统分页大小来设置，一般一个请求头的大小不会超过1k，不过由于一般系统分页都要大于1k，所以这里设置为分页大小。
    client_max_body_size 2M; #设置允许客户端请求的最大的单个文件字节数 
    sendfile        on;#开启高效文件传输模式 
    tcp_nopush     on; #开启防止网络阻塞 
    keepalive_timeout  45; #设置客户端连接保存活动的超时时间  
    client_header_timeout 10; #用于设置客户端请求读取超时时间 
    client_body_timeout 10; #用于设置客户端请求主体读取超时时间 

    open_file_cache max=1000000 inactive=30s; #这个将为打开文件指定缓存，默认是没有启用的，max 指定缓存数量，建议和打开文件数一致，inactive 是指经过多长时间文件没被请求后删除缓存。
    open_file_cache_valid 30s; #30秒检查一次缓存的有效信息
    open_file_cache_min_uses 1; #缓存中文件的使用次数少于1次将被删除
    

    gzip on; #开启gzip压缩  “gzip on”表示开启gzip压缩，实时压缩输出数据流
    gzip_disable "MSIE [1-6].";#禁止IE1-6压缩
    gzip_min_length 1k; #设置允许压缩的页面最小字节数 （gzip_min_length用于设置允许压缩的页面最小字节数，页面字节数从header头的Content-Length中获取。默认值是0，不管页面多大都进行压缩。建议设置成大于1K的字节数，小于1K可能会越压越大。）
    gzip_buffers 8 48k; #申请8个单位为48K的内存作为压缩结果流缓存 
    gzip_http_version 1.1; #设置识别http协议的版本,默认是1.1 
    gzip_comp_level 5; #指定gzip压缩比,1-9 数字越小,压缩比越小,速度越快. 
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
    limit_conn_zone  $binary_remote_addr zone=addr:10m;  #1.1.8版本发布后将limit_conn更换为limit_conn_zone
    limit_conn addr 10;
    #上面表示限制每个远程IP地址的客户端同时打开连接不能超过10个。	

	include /usr/local/nginx/conf/vhost/*.conf;
	server {
		listen         80;
                server_name 127.0.0.1;
                 location / {
            root   html;
            index  index.html index.htm;
       		 }	


	## Only allow these request methods ##
	if ($request_method !~ ^(GET|HEAD|POST)$ ) {
	return 444;
	}

	## Block some robots ##	
	if ($http_user_agent ~* (baiduspider|googlebot|soso|bing|sogou|yahoo|sohu-search|yodao|YoudaoBot|robozilla|msnbot|MJ12bot|NHN|Twiceler)) {
            return  403;
        }

}
}		
